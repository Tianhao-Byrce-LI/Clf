"""分类器的基本结构
"""
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
from sklearn.svm import SVC
from sklearn import svm
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import validation_curve
from sklearn.metrics import accuracy_score
from sklearn.model_selection import learning_curve
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE

#读取数据，删除null值
x_original=pd.read_excel('tezheng.xlsx')
x_v1=x_original[['is_user_binded','age','gender_id','marital_status_id','salary_level_id','edu_level_id','is_student','is_white_collar','days_active_last_90d','wx_share_last_90d','cashier_stay_time_avg_90d']]
x = x_v1.dropna(axis=0, how='any')
y=x['is_user_binded']
x=x.drop('is_user_binded',axis=1)



#数据归一化
StandardScaler().fit(x)

#分割测试集
train_X, val_X, train_y, val_y = train_test_split(x, y,test_size=0.4)

#进行过采样，解决样本不平衡的问题

# train_X, train_y = SMOTE().fit_sample(train_X, train_y)


clf = RandomForestClassifier(n_estimators=10)
clf=clf.fit(train_X, train_y)  # 决策树拟合
print("train score:", clf.score(train_X, train_y))
print("test score:", clf.score(val_X, val_y))
y_predict=clf.predict(val_X)
print('accuracy_score',accuracy_score(val_y, y_predict))

#计算评价指标
from sklearn.metrics import precision_score
print('precision_score' ,precision_score(val_y, y_predict))
from sklearn.metrics import recall_score
print('recall_score', recall_score(val_y, y_predict))

#绘制ROC曲线图
from sklearn.metrics import roc_curve
fpr,tpr,thre = roc_curve( val_y,y_predict )
from sklearn.metrics import auc
from sklearn import datasets, metrics, model_selection, svm
display = metrics.plot_roc_curve(clf, val_X, val_y)
print('type(display):',type(display))
plt.show()

#绘制混淆矩阵
import seaborn as sns
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
C2= confusion_matrix(val_y, y_predict, labels=[0, 1])
print(C2) 
sns.heatmap(C2,annot=True) 
